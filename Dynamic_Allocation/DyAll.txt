//***************************Lecture*************************//

1) Void pointer can point to which type of objects ?

Options
int
double
float
All <-

2) int main()
   {
        int d = 65;
        int i = d;
        char ch = i;
        cout << ch << endl;
   }

Answer
A

3) #include <iostream>
   using namespace std;

   void updateValue(int *p){
     *p = 610 % 255;
}

    int main(){
     char ch = 'A';
     updateValue((int*)&ch);
     cout << ch;
   }

Answer
d

4) What is the correct syntax of declaring and defining a reference?

Options
int a = 10; int &b; b = a;
int a = 10; int &b = a;    <-
int a = 10; int b = &a;
int a = 10; int &b = &a;

5) #include <iostream>
   using namespace std;

   void func(int p){
      cout << p << " ";
   }

      int main(){
        int i = 10;
        int &p = i;
        func(p++);
        cout << i;
}

Answer
10 11

6) #include <iostream>
   using namespace std;

    void func(int i, int& j, int p){
     i++;
     j++;
     p++;
   }

    int main(){
      int i = 10;
     int j = 6;
     int &p = i;
     func(i, j, p);
     cout << i << " " << j << " " << p;
   }

Answer
10 7 10

7) In CPP, dynamic memory allocation is done using ______________ operator.

Options
calloc()
malloc()
allocate
new  <-

8) How will you free the memory allocated by following program -
      #include <iostream>
      using namespace std;    

      int main() {
         int *a = new int;
     }

Options
free a;
delete *a;
delete a;  <- 
new a;

9) Correct statement for creating an integer array of size 5, dynamically -

Options
int *arr[] = new int[5];
int *arr = new int[5];  <- 
int arr = new int[5];
int *arr[5] = new int;

10) Correct statement for deallocating the array is -

Options
delete [] arr; <-
delete arr;
delete *arr;
delete [] *arr;

11) On deleting a dynamic memory, if the pointer value is not modified, then the pointer points to?

Options
NULL
Other dynamically allocated memory
The same deleted memory location   <-
It points back to location it was initialized with

12) How to Dynamically create a Two Dimensional Array in C++?

Options
int *twoDArray = new int[10][10];
int **twoDArray = new int*[10];   <-
int **twoDArray = new int[10][10];

13) Can we create Jagged Arrays in C++ ?

Options
Yes  <- 
No

14) Given the following CPP Program. Select the CORRECT Syntax of deleting this 2D array? Check all that apply.
     #include <iostream>
     using namespace std;

      int main()
   { 
    int **twoDArray = new int*[10];
    for(int i = 0; i < 10; i++)
        *(twoDArray + i) = new int[10];
   }

Options are -
A. 
delete twoDArray [][];

B.
for(int i = 0; i < 10; i++)
    delete twoDArray[i];
    delete twoDArray[];

C.
for(int i = 0; i < 10; i++)
    delete [] twoDArray[i];
    delete[] twoDArray;

D.
for(int i = 0; i < 10; i++)
    delete twoDArray[i][];
    delete[] twoDArray;

Options
A
B
C <- 
D

15) #include<iostream>
    using namespace std;

        int x = 1;

    void print(){
      int x = 2;
    {
        int x = 3;
        cout << x << endl;
    }
 }
      int main(){
        print();
         return 0;
     }

Options
1
2
3  <-
Error

16) What is the output of the following program?
       #include <iostream>
       using namespace std;

       #define MULTIPLY(a, b) a*b

         int main(){
           cout << MULTIPLY(2+3, 3+5);
              return 0;
         }

Answer
16

Solution Description
"MULTIPLY(a, b)" will be replaced by "a*b" in code.
So, MULTIPLY(2+3, 3+5) will be replaced by 2+3*3+5. And according to operator precedence, multiply operator (*) has higher precedence than plus operator (+). 
So, 3*3 will be evaluated first. Hence expression will become :
2+9+5 = 16

17) What is the output of the following program?
        #include <iostream>
        using namespace std;

        #define SQUARE(x) x*x

          int main(){
            int x = 36 / SQUARE(6);
            cout << x;

              return 0;
          }

Answer
36

18) Inline functions are useful when ______

Options
Function is large with many nested loops
Function has many static variables
Function is small and we want to avoid function call overhead.  <- 
None of the above

Solution Description
Inline functions are used to reduce the function call overhead. Inline function is a function that is expanded in line when it is called.

19) What is the output of the following program ?
      #include<iostream>
      using namespace std;

      int getValue(int x = 0, int y = 0, int z){  
         return (x + y + z); 
      }

      int main(){
        cout << getValue(10);
        return 0;
       }    

Options
10
0
20
Compilation Error <-

Solution Description
Default parameters must be added last in C++ functions

20) Which of the following statement is correct?

Options
Only one parameter of a function can be a default parameter.
Minimum one parameter of a function must be a default parameter.
All the parameters of a function can be default parameters. <- 
No parameter of a function can be default.

21) What is the output of the following program ?
      #include <iostream>
      using namespace std;

      int main(){
         int  const  p = 5;
         cout << ++p;
         return 0;
        }

Options
5
6
Error <-
Garbage

Solution Description
Values of constant variables cannot be altered

22) #include <iostream>
    using namespace std;

    int main(){
      int p = 5;
      int const *q = &p;
      p++;
      cout << p << endl;
      return 0;
    }

Options
Error
5
6 <-
None

Solution Description
Value of p can be increased or decreased as it is not a const value.

23) Which statement(s) will give an error for the following code -
       #include <iostream>
       using namespace std;

       int main(){
         int p = 5;
         int const *q = &p;
        }

Options
p++;
q++;
(*q)++; <-

24) Which statement(s) will give an error for the following code -
      #include <iostream>
      using namespace std;

      int main(){
       int p = 5;
       int const * const q = &p;
      }

Options
p++;
(*q)++; <-
q++;    <-  

25) Which statement(s) will give an error for the following code -
       #include <iostream>
       using namespace std;

       int main(){
          const int p = 5;
          int const *q = &p;
        }

Options
p++;    <-
q++
(*q)++; <-

