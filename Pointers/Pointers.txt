//***********************Lecture*********************//

1) Which of the following is the proper declaration of a pointer?

Options
int x;
int &x;
int *x; <- 
ptr x;


2) Which of the following gives the memory address of integer variable a ?

Options
*a;
a;
&a; <-
address(a);

3) Which of the following gives the memory address of variable 'b' pointed by pointer 'a' i.e.
         int b = 10;
         int *a = &b;

Options
a  <-
*a
&a
address(a)	 
    
4) What will happen in this code?
    int a = 100, b = 200;
    int *p = &a, *q = &b;
      p = q;

Options
b is assigned to a
p now points to b   <- 
a is assigned to b
q now points to a
   
5)  int a = 7;
    int b = 17;
    int *c = &b;
      *c = 7;
    cout  << a << "  “ << b << endl;
  
Options
7 1
17 7
7 7  <- 
17 17


6)  int a = 50;
    int *ptr = &a;
    int *q = ptr;
      (*q)++;
    cout << a  << endl;

Options
50
51   <-
Error
None of these

7)  int a = 50;
    int *ptr = &a;
    cout << (*ptr)++ << “ “;
    cout << a << endl;

Options
50 51  <- 
51 50
51 51
50 50

8) int *ptr = 0;
   int a = 10;
     *ptr = a;
   cout << *ptr << endl;

Options
10
0
Error  <-
None of these

9) int a = 7;
   int b = 17;
   int *c = &b; 
      a = *c;
     *c = *c + 1;
   cout  << a << "  " << b << endl;

Options
18 18
7 18
17 17
17 18  <-

10) What will be the output ?
       float f = 10.5;
       float p = 2.5;
       float* ptr = &f;
         (*ptr)++;
          *ptr = p;
       cout << *ptr << “ “ << f << “ “ << p;

Options
2.5 10.5 2.5
2.5 11.5 2.5
2.5 2.5 2.5  <-
11.5 11.5 2.5

11) int a = 7;
    int *c = &a;
    c = c + 1;
    cout  << a << "  " << *c << endl;

Options
Garbage_value 7
7 Garbage_value  <-
8 8
7 7

12) Assume memory address of variable ‘a’ is : 400 (and an integer takes 4 bytes), what will be the output -
      int a = 7;
      int *c = &a;
      c = c + 3;
      cout  << c << endl;

Answer
412

13) Assume memory address of variable ‘a’ is : 200 and a double variable is of size 8 bytes, what will be the output -
           double a = 10.54;
           double *d = &a;
           d = d + 1;
           cout  << d << endl;

Answer
208

14) Assume integer takes 4 bytes and integer pointer 8 bytes.
       int a[5];
       int *c;
       cout << sizeof(a) << “ “ << sizeof(c);

Options
8 8
5 8
20 8 <-
20 4

15) int a[] = {1, 2, 3, 4};
    cout << *(a) << " " << *(a+1);

Answer
1 2

16) Assume that address of 0th index of array ‘a’ is : 200.
       What is the output -
          int a[6] = {1, 2, 3};
          cout << a << “ “ << &a;

Options
Error
200 204
200 200  <-
1 200
200 1

17) Assume that address of 0th index of array ‘a’ is : 200. What is the output -
          int a[6] = {1, 2, 3};
          cout << (a + 2);

Answer
208

18) Assume address of 0th index of array 'a' is 200.
      What is the output -
         int a[6] = {1, 2, 3};
         int *b = a;
         cout << b[2];

Options
Error
3      <-
1
200
212

19) Assume address of 0th index of array 'a' is 200.
     What is the output -
        int a[] = {1, 2, 3, 4, 5};
        cout << *(a) << " " << *(a + 4);

Options
Error
200 216
1 5      <-
None of these

20) int a[] = {1, 2, 3, 4};
    int *p = a++;
    cout << *p << endl;

Options
1
2
Garbage value
Error  <-

21) What will be the output ?
      char ch = 'a';
      char* ptr = &ch;
      ch++;
      cout << *ptr << endl;

Options
a
b  <-
97
98

22) Assume address of 0th index of array ‘b’ is 200. What is the output -
       char b[] = "xyz";
       char *c = &b[0];
       cout << c << endl;

Options
200
x
xyz  <-
None of these

23) Assume address of 0th index of array ‘b’ is 200. What is the output -
      char b[] = "xyz";
      char *c = &b[0];
      c++;
      cout << c << endl;

Options
201
y
xyz
yz  <-

24) char s[]= "hello";
    char *p = s;
    cout << s[0] << " " << p[0];

Answer
h h

25) Figure out the correct output of the following code.

       void changeSign(int *p){
       *p = (*p)  *  -1;
   
      }

    int main(){
    int a = 10;
    changeSign(&a);
   cout << a << endl;
   }

Options
-10  <-
10
Error
None of the above

26) void fun(int a[]) {
    cout << a[0] << " ";
   }

    int main() {
       int a[] = {1, 2, 3, 4};
       fun(a + 1);
       cout << a[0];
    }

Answer
2 1

27) What will be the output ?
      void square(int *p){
      int a = 10;
      p = &a;
     *p = (*p) * (*p);
     }

  int main(){
  int a = 10;
  square(&a);
  cout << a << endl;
 }

Options
100
10  <-
Error
None of these

28) int a = 10;
    int *p = &a;
    int **q = &p;
    int b = 20;
      *q = &b;
      (*p)++;
    cout << a << " " << b << endl;

Options
10 21   <-
11 20
11 21
10 20

29) int a = 100;
    int *p = &a;
    int **q = &p;
    int b = (**q)++ + 4;
    cout << a << " " << b << endl;

Options
100 104
101 104 <-
101 105
100 105

30) What will be the output ?
     int a = 100;
     int *p = &a;
     int **q = &p;
     int b = (**q)++;
     int *r = *q;
      (*r)++;
     cout << a << " " << b << endl;

Options
102 100 <- 
101 100
101 101
102 101  

31) What will be the output ?
     void increment(int **p){
        (**p)++;
        }

     int main(){
     int num = 10;
     int *ptr = &num;
     increment(&ptr);
     cout << num << endl;
   }

Options
10
11  <-
Error
None of these


//****************************************Assignment***********************//

1) Find the output :
    #include <iostream>
    using namespace std;
    int main()
 {
  int arr[] = {4, 5, 6, 7};
  int *p = (arr + 1);
  cout << *arr + 9;
  return 0;
 }

Options
12
14
13  <-
error

2) #include <iostream>
   using namespace std;
   int main ()
 {
  int numbers[5];
  int * p;
  p = numbers; 
  *p = 10;
  p = &numbers[2]; 
  *p = 20;
  p--; 
  *p = 30;
  p = numbers + 3;
  *p = 40;
  p = numbers;
  *(p+4) = 50;
  for (int n=0; n<5; n++) {
     cout << numbers[n] << ",";
  }
  return 0;
 }
Options
10,20,30,40,50,
50,40,30,20,10,
10,30,20,40,50,  <-
None of these

3) #include <iostream>
   using namespace std;
   int main()
 { 
  char *ptr; 
  char Str[] = "abcdefg";
  ptr = Str;
  ptr += 5;
  cout << ptr;
  return 0;
 }
Options
fg   <-
cdef
defg
abcd

4) #include <iostream>
   using namespace std;
   int main()
 {
  char arr[20];
  int i;
  for(i = 0; i < 10; i++) {
    *(arr + i) = 65 + i;
  }

  *(arr + i) = '\0';
  cout << arr;
  return 0;
 }

Options
ABCDEFGHIJ  <-
AAAAAAAAAA
JJJJJJJJ
none of the mentioned

5) #include<iostream>
   using namespace std;
   void swap (char *x, char *y) 
 {
  char *t = x;
  x = y;
  y = t;
 }

int main()
{
   char *x = "geeksquiz";
   char *y = "geeksforgeeks";
   char *t;
   swap(x, y);
   cout<<x << " "<<y;
   t = x;
   x = y;
   y = t; 
   cout<<" "<<x<< " "<<y;
   return 0;
}
Note: On executing this code, a warning will appear: "ISO C++ forbids converting a string constant into 'char*'. " Ignore the warning and then print the expected output.

Options
geeksforgeeks geeksquiz geeksforgeeks geeksquiz
geeksquiz geeksforgeeks geeksquiz geeksforgeeks
geeksquiz geeksforgeeks geeksforgeeks geeksquiz  <- 
Compiler Error

6) #include <iostream>
   using namespace std;
   int main()
 {
  float arr[5] = {12.5, 10.0, 13.5, 90.5, 0.5};
  float *ptr1 = &arr[0];
  float *ptr2 = ptr1 + 3;
  cout<<*ptr2<<" ";
  cout<< ptr2 - ptr1;
  return 0;
 }
Options
90.5 3  <-
90.5 12
10.0 12
undefined

7) #include<iostream>
   using namespace std;
   int main() {
     char st[] = "ABCD";
     for(int i = 0; st[i] != ‘\0’; i++) {
     cout << st[i] << *(st)+i << *(i+st) << i[st];
  }
   return 0;
 }

Options
AAAABBBBCCCCDDDD
ABCD
A65AAB66BBC67CCD68DD  <- 
Compilation Error

8) #include <iostream>
   using namespace std;
   void Q(int z)
 {
  z += z;
  cout<<z << " ";
 }

  void P(int *y) 
 {
  int x = *y + 2;
  Q(x);
  *y = x - 1; 
  cout<<x << " ";
 }

 int main()
 {
  int x = 5;
  P(&x);
  cout<<x;
  return 0;
 }

Options
7 6 14
14 7 5
14 7 6  <- 
14 6 5

9) #include<iostream>
   using namespace std;
   int main()
  {
  int ***r, **q, *p, i=8;
  p = &i;
  (*p)++;
  q = &p;
  (**q)++;
  r = &q;
  cout<<*p << " " <<**q << " "<<***r;
 return 0;
 }

Options
8 8 8
10 10 10  <-
9 10 11
9 10 10

10) int f(int x, int *py, int **ppz) {
    int y, z;
    **ppz += 1;
    z = **ppz;
    *py += 2;
    y = *py;
    x += 3;
    return x + y + z;
}

  int main() {
    int c, *b, **a;
    c = 4;
    b = &c;
    a = &b;
    cout << f(c, b, a);
    return 0;
  }

Options
21
18
19 <- 
24

